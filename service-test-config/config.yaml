apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: default
  labels:
    app: sample-app
    environment: production
data:
  # Simple key-value pairs
  database_url: "postgresql://db.example.com:5432/myapp"
  redis_host: "redis.example.com"
  redis_port: "6379"
  log_level: "info"
  max_connections: "100"

  # Configuration file content
  app.properties: |
    # Application configuration
    server.port=8080
    server.host=0.0.0.0
    spring.datasource.url=jdbc:postgresql://db.example.com:5432/myapp
    spring.datasource.username=appuser
    spring.jpa.hibernate.ddl-auto=validate
    logging.level.com.example=INFO

  nginx.conf: |
    upstream backend {
        server app1:8080;
        server app2:8080;
        server app3:8080;
    }
    
    server {
        listen 80;
        server_name example.com;
        
        location / {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        
        location /health {
            access_log off;
            return 200 "healthy\n";
        }
    }

  config.json: |
    {
      "environment": "production",
      "features": {
        "feature_a": true,
        "feature_b": false,
        "feature_c": true
      },
      "limits": {
        "max_users": 10000,
        "rate_limit": 1000,
        "timeout": 30
      },
      "external_services": {
        "payment_gateway": "https://api.payment.example.com",
        "notification_service": "https://notifications.example.com"
      }
    }

  init.sql: |
    CREATE TABLE IF NOT EXISTS users (
        id SERIAL PRIMARY KEY,
        username VARCHAR(50) UNIQUE NOT NULL,
        email VARCHAR(100) UNIQUE NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
    
    CREATE INDEX IF NOT EXISTS idx_users_username ON users(username);
    CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);
    
    INSERT INTO users (username, email) VALUES 
    ('admin', 'admin@example.com') 
    ON CONFLICT (username) DO NOTHING;

